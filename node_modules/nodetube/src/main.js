import axios from "axios";
import qs from "qs";

import { extractPlayerConfig, extractVideoId } from "./parser";
import { generateDecoder } from "./decoder";

/**
 * very simple, Fast Youtube downloader
 * @author Yujun Jung <yj01jung@gmail.com>
 * @license MIT
 * @version 0.1.0
 *
 * Thanks to Nick Ficano
 * from Pytybe https://github.com/nficano/pytube
 */

export class Youtube {
  /**
   * Youtube downloader that doesn't have node deps
   * @param {string} init videoId or url
   */
  constructor(init) {
    this.videoId = init.length === 11 ? init : extractVideoId(init);
    this._loaded = this.init();
  }
  /**
   * fetch watch html, parse data, create decoder
   */
  async init() {
    const response = await axios.get(this.watchUrl);
    this.playerConfig = extractPlayerConfig(response.data);
    this.videoInfo = this.playerConfig.args;
    this.playerResponse = JSON.parse(this.videoInfo.player_response);
    await this.createDecoder();
  }

  /** @internal */
  async createDecoder() {
    const url = "https://www.youtube.com" + this.playerConfig.assets.js;
    const response = await axios.get(url);
    this.decoder = generateDecoder(response.data);
  }
  /**
   * @internal
   * @returns {string} decoded url
   * @param {string} url cipher.url dont have &sig=
   * @param {string} encrypted cipher.s
   */
  decodeSignature(url, encrypted) {
    return url + "&sig=" + this.decoder(encrypted);
  }

  /**
   * @returns {Promise<string>} media stream url that works
   * @param {number | Function} itag ex) yt.stream(251)
   * @see youtube_itag_list https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2
   *
   * @example yt.stream(251) -> Promise { "https://r-5f-324f.googlevideo.com/videoplayback..." }
   */
  async stream(itag) {
    await this._loaded;
    const predicate = typeof itag === "function" ? itag : (it) => it.itag === itag;
    const { signatureCipher } = this.playerResponse.streamingData.adaptiveFormats.find(predicate);
    const streamInfo = qs.parse(signatureCipher);
    return this.decodeSignature(streamInfo.url, streamInfo.s);
  }

  get watchUrl() {
    return "https://www.youtube.com/watch?v=" + this.videoId;
  }
}
