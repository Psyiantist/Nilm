const REGEX_ESCAPE_PATTERN = /[-\/\\^$*+?.()|[\]{}]/g;
const REMOVE_NEWLINE_PATTERN = /(\r\n\t|\n|\r\t)/gm;
const INITIAL_IDENT_PATTERNS = [
  /\b[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*encodeURIComponent\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\b[a-zA-Z0-9]+\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*encodeURIComponent\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\b([a-zA-Z0-9$]{2})\s*=\s*function\(\s*a\s*\)\s*{\s*a\s*=\s*a\.split\(\s*""\s*\)/,
  /([a-zA-Z0-9$]+)\s*=\s*function\(\s*a\s*\)\s*{\s*a\s*=\s*a\.split\(\s*""\s*\)/,
  /(["\'])signature\1\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\.sig\|\|([a-zA-Z0-9$]+)\(/,
  /yt\.akamaized\.net\/\)\s*\|\|\s*.*?\s*[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*(?:encodeURIComponent\s*\()?\s*([a-zA-Z0-9$]+)\(/,
  /\b[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\b[a-zA-Z0-9]+\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*a\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
];

export function generateDecoder(js) {
  const process = getTransfromProcess(js);
  return generateFunctionBody(js, process);
}

function getInitialIdentifier(js) {
  for (const pattern of INITIAL_IDENT_PATTERNS) {
    const matched = js.match(pattern);
    if (matched) {
      return matched[1];
    }
  }
}

function getTransfromProcess(js) {
  const name = getInitialIdentifier(js);
  const pattern = new RegExp(String.raw`${escapeRegex(name)}=function\(\w\){[a-z=\.\(\"\)]*;(.*);(?:.+)}`);
  return js.match(pattern)[1].split(";");
}

function escapeRegex(val) {
  return val.replace(REGEX_ESCAPE_PATTERN, "\\$&");
}

function generateFunctionBody(js, processes) {
  const variableName = processes[0].split(".")[0];
  const pattern = new RegExp(String.raw`var ${escapeRegex(variableName)}={(.*?)};`);
  const body = js.replace(REMOVE_NEWLINE_PATTERN, "").match(pattern)[1];

  return new Function( // BAD CODE, NEEDS TO FIX
    "a",
    `var ${variableName} = {${body}};
     a = a.split("");
     ${processes.join(";")}
     return a.join("");`
  );
}
