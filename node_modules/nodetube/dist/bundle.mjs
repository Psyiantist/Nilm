import axios from 'axios';
import qs from 'qs';

const WATCH_HTML_PATTERNS = [
  /;ytplayer\.config\s*=\s*({.*?});/,
  /;ytplayer\.config\s*=\s*({.+?});ytplayer/,
  /;yt\.setConfig\(\{'PLAYER_CONFIG':\s*({.*})}\);/,
  /;yt\.setConfig\(\{'PLAYER_CONFIG':\s*({.*})(,'EXPERIMENT_FLAGS'|;)/,
];

const VIDEO_ID_PATTERN = /(?:v=|\/)([0-9A-Za-z_-]{11}).*/;

function extractPlayerConfig(html) {
  for (const pattern of WATCH_HTML_PATTERNS) {
    const matched = html.match(pattern);
    if (matched) {
      return JSON.parse(matched[1]);
    }
  }
}

function extractVideoId(url) {
  return url.match(VIDEO_ID_PATTERN)[1];
}

const INITIAL_IDENT_PATTERNS = [
  /\b[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*encodeURIComponent\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\b[a-zA-Z0-9]+\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*encodeURIComponent\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\b([a-zA-Z0-9$]{2})\s*=\s*function\(\s*a\s*\)\s*{\s*a\s*=\s*a\.split\(\s*""\s*\)/,
  /([a-zA-Z0-9$]+)\s*=\s*function\(\s*a\s*\)\s*{\s*a\s*=\s*a\.split\(\s*""\s*\)/,
  /(["\'])signature\1\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\.sig\|\|([a-zA-Z0-9$]+)\(/,
  /yt\.akamaized\.net\/\)\s*\|\|\s*.*?\s*[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*(?:encodeURIComponent\s*\()?\s*([a-zA-Z0-9$]+)\(/,
  /\b[cs]\s*&&\s*[adf]\.set\([^,]+\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\b[a-zA-Z0-9]+\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*a\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
  /\bc\s*&&\s*[a-zA-Z0-9]+\.set\([^,]+\s*,\s*\([^)]*\)\s*\(\s*([a-zA-Z0-9$]+)\(/,
];

function generateDecoder(js) {
  const process = getTransfromProcess(js);
  return generateFunctionBody(js, process);
}

function getInitialIdentifier(js) {
  for (const pattern of INITIAL_IDENT_PATTERNS) {
    const matched = js.match(pattern);
    if (matched) {
      return matched[1];
    }
  }
}

function getTransfromProcess(js) {
  const name = getInitialIdentifier(js);
  const pattern = new RegExp(String.raw`${escapeRegex(name)}=function\(\w\){[a-z=\.\(\"\)]*;(.*);(?:.+)}`);
  return js.match(pattern)[1].split(";");
}

function escapeRegex(val) {
  return val.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}

function generateFunctionBody(js, processes) {
  const variableName = processes[0].split(".")[0];
  const pattern = new RegExp(String.raw`var ${escapeRegex(variableName)}={(.*?)};`);
  const body = js.replace(/(\r\n\t|\n|\r\t)/gm, "").match(pattern)[1];
  return new Function(
    "a",
    `var ${variableName} = {${body}};
     a = a.split("");
     ${processes.join(";")}
     return a.join("");`
  );
}

/**
 * very simple, Fast Youtube downloader
 * @author Yujun Jung <yj01jung@gmail.com>
 * @license MIT
 * @version 0.1.0
 *
 * Thanks to Nick Ficano
 * from Pytybe https://github.com/nficano/pytube
 */

class Youtube {
  /**
   * Youtube downloader that doesn't have node deps
   * @param {string} init videoId or url
   */
  constructor(init) {
    this.videoId = init.length === 11 ? init : extractVideoId(init);
    this._loaded = this.init();
  }
  /**
   * fetch watch html, parse data, create decoder
   */
  async init() {
    const response = await axios.get(this.watchUrl);
    this.playerConfig = extractPlayerConfig(response.data);
    this.videoInfo = this.playerConfig.args;
    this.playerResponse = JSON.parse(this.videoInfo.player_response);
    await this.createDecoder();
  }

  /** @internal */
  async createDecoder() {
    const url = "https://www.youtube.com" + this.playerConfig.assets.js;
    const response = await axios.get(url);
    this.decoder = generateDecoder(response.data);
  }
  /**
   * @internal
   * @returns {string} decoded url
   * @param {string} url cipher.url dont have &sig=
   * @param {string} encrypted cipher.s
   */
  decodeSignature(url, encrypted) {
    return url + "&sig=" + this.decoder(encrypted);
  }

  /**
   * @returns {Promise<string>} media stream url that works
   * @param {number | Function} itag ex) yt.stream(251)
   * @see youtube_itag_list https://gist.github.com/sidneys/7095afe4da4ae58694d128b1034e01e2
   *
   * @example yt.stream(251) -> Promise { "https://r-5f-324f.googlevideo.com/videoplayback..." }
   */
  async stream(itag) {
    await this._loaded;
    const predicate = typeof itag === "function" ? itag : (it) => it.itag === itag;
    const { signatureCipher } = this.playerResponse.streamingData.adaptiveFormats.find(predicate);
    const streamInfo = qs.parse(signatureCipher);
    return this.decodeSignature(streamInfo.url, streamInfo.s);
  }

  get watchUrl() {
    return "https://www.youtube.com/watch?v=" + this.videoId;
  }
}

export { Youtube };
